
// Mixins Global
// =============

// Do not change these lines.
$browser-default-font-size:   16px;
$rhythm-unit:                 "em";
$relative-font-sizing:        true;
$default-rhythm-border-style: solid;
$font-unit: if($relative-font-sizing, 1em, $base-font-size);

/// bootstrap - responsive visibility
/// @mixin   responsive-visibility
/// @param   $parent {String} class name
/// @see     @mixin responsive-invisibility
/// @usage:
/// =responsive-visibility("visible-xs")
@mixin responsive-visibility($parent) {
  // scss-lint:disable ImportantRule
  #{$parent} { display: block !important; }
  // scss-lint:enable ImportantRule
}

/// bootstrap - responsive invisibility
/// @mixin   responsive-invisibility
/// @param   $parent {String} class name
/// @see     @mixin responsive-visibility
/// @usage:
/// =responsive-invisibility("hidden-xs")
@mixin responsive-invisibility($parent) {
  // scss-lint:disable ImportantRule
  #{$parent} { display: none !important; }
  // scss-lint:enable ImportantRule
}

/*doc
---
title: Inline-block
category: Global - Mixins
---

@mixin inline-block

-    __$alignment:__ Vertiale alignment

```

  .class__name {
    @include inline-block("top");
  }

```

*/

@mixin inline-block($alignment: top) {
  display: inline-block;
  @if $alignment and $alignment != none {
    vertical-align: $alignment;
  }
}

/*doc
---
title: Media Queries
category: Global - Mixins
---

Variable `$keyword` possible egal to :

* `large` : min-width: 1200px
* `medium` : min-width: 769px
* `small` : min-width: 768px
* `smaller` : max-width: 768px

@mixin mq

-    __$keyword:__ Media queries name

```

  @include mq("large") {
    ...
  }

```

*/

@mixin mq($keyword) {
  @if $keyword == smaller {
    @media (max-width: $screen-sm-min) { @content; }
  }
  @if $keyword == small {
    @media (min-width: $screen-sm-min) { @content; }
  }
  @if $keyword == medium {
    @media (min-width: $screen-md-min) { @content; }
  }
  @if $keyword == large {
    @media (min-width: $screen-lg-min) { @content; }
  }
}

// establish-baseline
@mixin establish-baseline($font-size: $base-font-size, $font-family: map-get($font-families, "body")) {
  $taille: ($font-size / $browser-default-font-size * 100%);
  $line-height: rhythm(1, $font-size);

  // scss-lint:disable VendorPrefix
  html {
    font: #{$taille}/#{$line-height} $font-family;
    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
  }
  // scss-lint:enable VendorPrefix
}

// Calculate rhythm units
@function rhythm($lines: 1, $font-size: $base-font-size) {
  $rhythm: $font-unit * $lines * $base-line-height / $font-size;
  @return $rhythm;
}

@function lines-for-font-size($font-size) {
  $lines: ceil($font-size / $base-line-height);
  @if $lines * $base-line-height - $font-size < 1 {
    $lines: $lines + 1;
  }
  @return $lines;
}

@mixin font-size($taille:$base-font-size) {
  font-size: $font-unit * $taille / $base-font-size;
  line-height: rhythm(lines-for-font-size($taille), if($relative-font-sizing, $taille, $base-font-size));
}
