
/**
 * Configuration Mixins
 */

// Do not change these lines.
$browser-default-font-size:   16px;
$rhythm-unit:                 "em";
$relative-font-sizing:        true;
$default-rhythm-border-style: solid;
$font-unit: if($relative-font-sizing, 1em, $base-font-size);

/// bootstrap - responsive visibility
/// @mixin   responsive-visibility
/// @param   $parent {String} class name
/// @see     @mixin responsive-invisibility
/// @usage:
/// =responsive-visibility("visible-xs")
@mixin responsive-visibility($parent) {
  // scss-lint:disable ImportantRule
  #{$parent} { display: block !important; }
  // scss-lint:enable ImportantRule
}

/// bootstrap - responsive invisibility
/// @mixin   responsive-invisibility
/// @param   $parent {String} class name
/// @see     @mixin responsive-visibility
/// @usage:
/// =responsive-invisibility("hidden-xs")
@mixin responsive-invisibility($parent) {
  // scss-lint:disable ImportantRule
  #{$parent} { display: none !important; }
  // scss-lint:enable ImportantRule
}

/// Drupal - Item form field
/// @mixin   form-item
/// @param   $inp-height {String} Line Height
/// @see     @mixin form-item-inline
/// @usage:
/// =form-item(32px)
@mixin form-item($inp-height) {
  @extend %clearfix;
  position: relative;
  margin: 0 0 rhythm(.5);

  label {
    @include bold;
    display: block;
    line-height: $inp-height;
  }

  .form-item {
    margin: 0;
  }

  &.form-type--radio,
  &.form-type--checkbox {
    label {
      display: inline-block;
      vertical-align: middle;
      line-height: 1;
    }
  }
}

/// Drupal webform - Item form field Inline (responsive version is block)
/// @mixin   form-item-inline
/// @param   $inp-height {String} Line Height
/// @see     @mixin form-item
/// @usage:
/// =form-item-inline(32px)
@mixin form-item-inline($inp-height) {
  @include mq("small") {
    padding: 0 0 0 $form-label-width + $form-label-marge;

    label,
    .label {
      position: absolute;
      top: 0;
      left: 0;
      width: $form-label-width;
      margin-right: $form-label-marge;
      text-align: right;
    }

    .form-item {
      padding-left: 0;
      margin-bottom: 0;

      label,
      .label {
        display: inline-block;
        vertical-align: middle;
        position: relative;
        width: auto;
        margin-right: 0;
        font-weight: normal;
        text-align: left;
      }
    }

    .form-type--radio,
    .form-type--checkbox {
      label {
        position: relative;
        width: auto;
        margin-right: 0;
        text-align: left;
      }
    }
  }
}

/// Custom - ???
/// @mixin   form-item-inlineblock
/// @todo    Check utiliiy
/// @see     @mixin form-item
/// @usage:
/// =form-item-inlineblock
@mixin form-item-inlineblock {
  .form-item:first-child {
    margin-right: 20px;
  }

  > .form-item {
    float: left;
  }
}

/*doc
---
title: Inline-block
category: Global - Mixins
---

@mixin inline-block

-    __$alignment:__ Vertiale alignment

```

  .class__name {
    @include inline-block("top");
  }

```

*/

@mixin inline-block($alignment: top) {
  display: inline-block;
  @if $alignment and $alignment != none {
    vertical-align: $alignment;
  }
}

/*doc
---
title: Media Queries
category: Global - Mixins
---

Variable `$keyword` possible egal to :

* `large` : min-width: 1200px
* `medium` : min-width: 769px
* `small` : min-width: 768px
* `smaller` : max-width: 768px

@mixin mq

-    __$keyword:__ Media queries name

```

  @include mq("large") {
    ...
  }

```

*/

@mixin mq($keyword) {
  @if $keyword == smaller {
    @media (max-width: $screen-sm-min) { @content; }
  }
  @if $keyword == small {
    @media (min-width: $screen-sm-min) { @content; }
  }
  @if $keyword == medium {
    @media (min-width: $screen-md-min) { @content; }
  }
  @if $keyword == large {
    @media (min-width: $screen-lg-min) { @content; }
  }
}

// @mixin establish-baseline
@mixin establish-baseline($font-size: $base-font-size, $font-family: map-get($font-families, "body")) {
  $taille: ($font-size / $browser-default-font-size * 100%);
  $line-height: rhythm(1, $font-size);

  // scss-lint:disable VendorPrefix
  html {
    font: #{$taille}/#{$line-height} $font-family;
    -webkit-font-smoothing: antialiased;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
  }
  // scss-lint:enable VendorPrefix
}

// Calculate rhythm units
@function rhythm($lines: 1, $font-size: $base-font-size) {
  $rhythm: $font-unit * $lines * $base-line-height / $font-size;
  @return $rhythm;
}

@function lines-for-font-size($font-size) {
  $lines: ceil($font-size / $base-line-height);
  @if $lines * $base-line-height - $font-size < 1 {
    $lines: $lines + 1;
  }
  @return $lines;
}

@mixin font-size($taille:$base-font-size) {
  font-size: $font-unit * $taille / $base-font-size;
  line-height: rhythm(lines-for-font-size($taille), if($relative-font-sizing, $taille, $base-font-size));
}

/*
---
title: Grid
category: Grid - Mixins
---

Framework grid generation
Used only by Bootstrap to generate the correct number of grid classes given any value of `$grid-columns`.

[converter] This is defined recursively in LESS, but Sass supports real loops

*/

@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }

  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left: ($grid-gutter-width / 2);
    padding-right: ($grid-gutter-width / 2);
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }

  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}

// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
  @extend .clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left: ($gutter / -2);
  margin-right: ($gutter / -2);
  @extend .clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
}

@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}

@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}

@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}

@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}

@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}

@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}
